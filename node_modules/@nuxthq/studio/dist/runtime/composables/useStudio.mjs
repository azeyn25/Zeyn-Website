import { createApp } from "vue";
import defu from "defu";
import ContentPreviewMode from "../components/ContentPreviewMode.vue";
import { createSingleton, deepAssign, deepDelete, mergeDraft, StudioConfigFiles, StudioConfigRoot } from "../utils/index.mjs";
import { callWithNuxt } from "#app";
import { refreshNuxtData, useAppConfig, useCookie, useNuxtApp, useRuntimeConfig, useState } from "#imports";
const useDefaultAppConfig = createSingleton(() => JSON.parse(JSON.stringify(useAppConfig())));
export const useStudio = () => {
  const nuxtApp = useNuxtApp();
  const runtimeConfig = useRuntimeConfig().public.studio || {};
  const initialAppConfig = useDefaultAppConfig();
  let initialTokensConfig;
  const storage = useState("studio-client-db", () => null);
  const dbFiles = useState("studio-preview-db-files", () => []);
  nuxtApp.hook("content:storage", (_storage) => {
    storage.value = _storage;
  });
  const syncPreviewFiles = async (contentStorage, files, ignoreBuiltContents = true) => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    const keys = await contentStorage.getKeys(`${previewToken.value}:`);
    await Promise.all(keys.map((key) => contentStorage.removeItem(key)));
    const sources = new Set(files.map((file) => file.parsed._id.split(":").shift()));
    await contentStorage.setItem(`${previewToken.value}$`, JSON.stringify({ ignoreSources: Array.from(sources) }));
    await Promise.all(
      files.map((item) => contentStorage.setItem(`${previewToken.value}:${item.parsed._id}`, JSON.stringify(item.parsed)))
    );
  };
  const syncPreviewAppConfig = (appConfig) => {
    const _appConfig = callWithNuxt(nuxtApp, useAppConfig);
    deepAssign(_appConfig, defu(appConfig, initialAppConfig));
    if (!appConfig) {
      deepDelete(_appConfig, initialAppConfig);
    }
  };
  const syncPreviewTokensConfig = (tokensConfig) => {
    const themeSheet = nuxtApp?.vueApp?._context?.config?.globalProperties?.$pinceauTheme;
    if (!themeSheet || !themeSheet?.updateTheme) {
      return;
    }
    if (!initialTokensConfig) {
      initialTokensConfig = JSON.parse(JSON.stringify(themeSheet?.theme.value || {}));
    }
    callWithNuxt(
      nuxtApp,
      themeSheet.updateTheme,
      [
        defu(tokensConfig, initialTokensConfig)
      ]
    );
  };
  const syncPreview = async (data) => {
    dbFiles.value = data.files = data.files || dbFiles.value || [];
    if (!storage.value) {
      return false;
    }
    const mergedFiles = mergeDraft(data.files, data.additions, data.deletions);
    const contentFiles = mergedFiles.filter((item) => !item.path.startsWith(StudioConfigRoot));
    await syncPreviewFiles(storage.value, contentFiles, (data.files || []).length !== 0);
    const appConfig = mergedFiles.find((item) => item.path === StudioConfigFiles.appConfig);
    syncPreviewAppConfig(appConfig?.parsed);
    const tokensConfig = mergedFiles.find((item) => item.path === StudioConfigFiles.tokensConfig);
    syncPreviewTokensConfig(tokensConfig?.parsed);
    requestRerender();
    return true;
  };
  const requestPreviewSynchronization = async () => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    await $fetch("api/projects/preview/sync", {
      baseURL: runtimeConfig.apiURL,
      method: "POST",
      params: {
        token: previewToken.value
      }
    });
  };
  const mountPreviewUI = () => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    const el = document.createElement("div");
    el.id = "__nuxt_preview_wrapper";
    document.body.appendChild(el);
    createApp(ContentPreviewMode, {
      previewToken,
      apiURL: runtimeConfig.apiURL,
      syncPreview,
      requestPreviewSyncAPI: requestPreviewSynchronization
    }).mount(el);
  };
  const findContentWithId = async (path) => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    if (!path) {
      return null;
    }
    path = path.replace(/\/$/, "");
    let content = await storage.value?.getItem(`${previewToken.value}:${path}`);
    if (!content) {
      content = await storage.value?.getItem(`cached:${path}`);
    }
    if (!content) {
      content = content = await storage.value?.getItem(path);
    }
    return content;
  };
  const updateContent = (content) => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    if (!storage.value) {
      return;
    }
    storage.value.setItem(`${previewToken.value}:${content.parsed?._id}`, JSON.stringify(content.parsed));
  };
  const removeContentWithId = async (path) => {
    const previewToken = useCookie("previewToken", { sameSite: "none", secure: true });
    await storage.value?.removeItem(`${previewToken.value}:${path}`);
  };
  const requestRerender = () => {
    callWithNuxt(nuxtApp, refreshNuxtData);
  };
  return {
    apiURL: runtimeConfig.apiURL,
    contentStorage: storage,
    syncPreviewFiles,
    syncPreviewAppConfig,
    syncPreviewTokensConfig,
    requestPreviewSynchronization,
    mountPreviewUI,
    findContentWithId,
    updateContent,
    removeContentWithId,
    requestRerender
  };
};
