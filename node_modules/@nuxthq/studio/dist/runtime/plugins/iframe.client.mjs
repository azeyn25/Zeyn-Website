import { StudioConfigFiles } from "../utils/index.mjs";
import { defineNuxtPlugin, ref, toRaw, useRoute, useRouter } from "#imports";
export default defineNuxtPlugin(async (nuxtApp) => {
  if (!window.parent || window.self === window.parent) {
    return;
  }
  const router = useRouter();
  const editorSelectedPath = ref("");
  const isDocumentDrivenInitialHook = ref(true);
  const routePayload = (route) => ({
    path: route.path,
    query: toRaw(route.query),
    params: toRaw(route.params),
    fullPath: route.fullPath,
    meta: toRaw(route.meta)
  });
  const useStudio = await import("../composables/useStudio").then((m) => m.useStudio);
  const { findContentWithId, updateContent, removeContentWithId, requestRerender, syncPreviewAppConfig, syncPreviewTokensConfig } = useStudio();
  window.addEventListener("keydown", (e) => {
    if (e.metaKey || e.ctrlKey || e.altKey || e.shiftKey) {
      window.parent.postMessage({
        type: "nuxt-studio:preview:keydown",
        payload: {
          key: e.key,
          metaKey: e.metaKey,
          ctrlKey: e.ctrlKey,
          shiftKey: e.shiftKey,
          altKey: e.altKey
        }
      }, "*");
    }
  });
  window.addEventListener("message", async (e) => {
    const { type, payload = {} } = e.data || {};
    switch (type) {
      case "nuxt-studio:editor:file-selected": {
        const content = await findContentWithId(payload.path);
        if (!content) {
          editorSelectedPath.value = "/";
          if (useRoute().path !== "/") {
            router.push("/");
          }
        } else if (content._partial) {
        } else if (content._path !== useRoute().path) {
          editorSelectedPath.value = content._path;
          router.push(content._path);
        }
        break;
      }
      case "nuxt-studio:editor:file-changed": {
        const { additions = [], deletions = [] } = payload;
        for (const addition of additions) {
          await updateContent(addition);
        }
        for (const deletion of deletions) {
          await removeContentWithId(deletion.path);
        }
        requestRerender();
        break;
      }
      case "nuxt-studio:config:file-changed": {
        const { additions = [], deletions = [] } = payload;
        const appConfig = additions.find((item) => item.path === StudioConfigFiles.appConfig);
        if (appConfig) {
          syncPreviewAppConfig(appConfig?.parsed);
        }
        const shouldRemoveAppConfig = deletions.find((item) => item.path === StudioConfigFiles.appConfig);
        if (shouldRemoveAppConfig) {
          syncPreviewAppConfig(void 0);
        }
        const tokensConfig = additions.find((item) => item.path === StudioConfigFiles.tokensConfig);
        if (tokensConfig) {
          syncPreviewTokensConfig(tokensConfig?.parsed);
        }
        const shouldRemoveTokensConfig = deletions.find((item) => item.path === StudioConfigFiles.tokensConfig);
        if (shouldRemoveTokensConfig) {
          syncPreviewTokensConfig(void 0);
        }
        break;
      }
    }
  });
  nuxtApp.hook("content:document-driven:finish", ({ route, page, dedup }) => {
    if (dedup || isDocumentDrivenInitialHook.value) {
      isDocumentDrivenInitialHook.value = false;
      return;
    }
    if (page && editorSelectedPath.value === page._path) {
      editorSelectedPath.value = "";
      return;
    }
    window.parent.postMessage({
      type: "nuxt-studio:preview:document-driven:finish",
      payload: {
        ...routePayload(route),
        contentId: page?._id
      }
    }, "*");
  });
  router?.afterEach((to) => {
    window.parent.postMessage({
      type: "nuxt-studio:preview:route-changed",
      payload: routePayload(to)
    }, "*");
  });
  nuxtApp.hook("nuxt-studio:preview:ready", () => {
    window.parent.postMessage({
      type: "nuxt-studio:preview:ready",
      payload: routePayload(useRoute())
    }, "*");
  });
});
